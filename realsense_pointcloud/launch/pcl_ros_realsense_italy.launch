<launch>
  <!-- https://dev.intelrealsense.com/docs/post-processing-filters -->
  <!-- https://dev.intelrealsense.com/docs/post-processing-filters -->
  <include file="$(find realsense2_camera)/launch/rs_camera.launch">
      <arg name="align_depth" value="True"/>
      <arg name="color_fps" value="15"/>
      <arg name="color_width" value="1280"/>
      <arg name="color_height" value="720"/>
      <arg name="depth_fps" value="15"/>
      <arg name="depth_width" value="1280"/>
      <arg name="depth_height" value="720"/>
      <arg name="enable_pointcloud" value="True"/>
      <arg name="enable_infra" value="True"/>
      <arg name="filters" value="decimation,spatial,temporal"/>
          <!-- <param name="/camera/decimation/filter_magnitude" value="1"/> -->
          <!-- <param name="/camera/spatial/filter_magnitude" value="3"/> -->
  </include>

  <rosparam file="$(find realsense_pointcloud)/cfg/camera_decimation_filter.yaml" command="load" />
  <rosparam file="$(find realsense_pointcloud)/cfg/camera_spatial_filter.yaml" command="load" />
  <rosparam file="$(find realsense_pointcloud)/cfg/camera_temporal_filter.yaml" command="load" />
  <rosparam file="$(find realsense_pointcloud)/cfg/camera_hole_filling_filter.yaml" command="load" />

  <!-- Remapping for italy rosbags -->
      <remap from="/camera/color/camera_info" to="/camera_left_d435/color/camera_info"/>
      <remap from="/camera/color/image_raw" to="/camera_left_d435/color/image_raw"/>
      <remap from='/camera/aligned_depth_to_color/image_raw' to="/camera_left_d435/aligned_depth_to_color/image_raw"/>
      <remap from='/camera/color/image_raw/compressed' to="/camera_left_d435/color/image_raw/compressed"/>
      <remap from="/camera/depth/color/points" to="/camera_left_d435/depth/color/points"/>
      <remap from="/camera/depth/camera_info" to="/camera_left_d435/depth/camera_info"/>
      <remap from="camera_link" to="camera_left_d435_link" />







    <!--The node removes points with higher intensity ( light ) publishes /filtered_depth_image-->
    <node name="pointcloud_preprocess" pkg="realsense_pointcloud" type="pointcloud_preprocess.py" output="screen" />
    <node name="pointcloud_cable_preprocess" pkg="realsense_pointcloud" type="pointcloud_cables_pcl.py" output="screen" />
    <node name="cropper" pkg="realsense_pointcloud" type="crop.py" output="screen" />
    <node name="gem_detector_node" pkg="realsense_pointcloud" type="gem_detector.py" output="screen" />


    <!-- Convert the depth image and the rgb image into a xyzrgb Point Cloud -->
    <!-- <node name="update_frame_id" pkg="depth_image_proc" type="update_frame_id.py" output="screen" /> -->
    <!-- Nodelet manager for this pipeline -->
    <node pkg="nodelet" type="nodelet" args="manager" name="standalone_nodelet" output="screen"/>

    <!-- Convert to point cloud -->
    <node pkg="nodelet" type="nodelet" name="depth_image_proc" args="load depth_image_proc/point_cloud_xyzrgb standalone_nodelet --no-bond">
        <!--remap from your specific sensors-->
        <!-- Input: Camera calibration and metadata.  (sensor_msgs/CameraInfo) -->
        <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
        <!-- Input: Rectified color image. (sensor_msgs/Image) -->
        <remap from="rgb/image_rect_color" to="/camera/color/image_raw"/>
        <!-- Input: Rectified depth image, registered to the RGB camera. (sensor_msgs/Image) -->
        <remap from="depth_registered/image_rect" to="/filtered_depth_image"/>
        <!-- Output: XYZ point cloud. If using PCL, subscribe as PointCloud<PointXYZ>.  (sensor_msgs/PointCloud2)  -->
        <remap from="depth_registered/points" to="/point_cloud/points_light_filtered"/>

    </node>

    <!-- same node as above -->
    <node pkg="nodelet" type="nodelet" name="depth_image_proc_cables" args="load depth_image_proc/point_cloud_xyzrgb standalone_nodelet --no-bond">
        <!--framerate of input depth is lower then camera framrate, parameter waits for 30 imgs-->
    	<param name="queue_size" value="30" />
        <!--remap from your specific sensors-->
        <!-- Input: Camera calibration and metadata.  (sensor_msgs/CameraInfo) -->
        <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
        <!-- Input: Rectified color image. (sensor_msgs/Image) -->
        <remap from="rgb/image_rect_color" to="/camera/color/image_raw"/>
        <!-- Input: Rectified depth image, registered to the RGB camera. (sensor_msgs/Image) -->
        <remap from="depth_registered/image_rect" to="/filtered_depth_cables"/>
        <!-- Output: XYZ point cloud. If using PCL, subscribe as PointCloud<PointXYZ>.  (sensor_msgs/PointCloud2)  -->
        <remap from="depth_registered/points" to="/point_cloud/point_cables"/>

    </node>


<!--
  <node pkg="nodelet" type="nodelet" name="nodelet1_test" args="load depth_image_proc/point_cloud_xyz standalone_nodelet no-bond">
    <remap from="camera_info" to="/camera_left_d435/depth/camera_info"/>
    <remap from="image_rect" to="/filtered_depth_cables"/>
    <remap from="points" to="/points_cables_test"/>
  </node> -->






    <!-- <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />  -->

  <!-- Run a passthrough filter to clean NaNs -->
  <!--
  <node pkg="nodelet" type="nodelet" name="passthrough" args="load pcl/PassThrough pcl_manager" output="screen">
    <remap from="~input" to="/camera/depth/color/points" />
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.03
      filter_limit_max: 2
      filter_limit_negative: False
    </rosparam>
  </node>
-->
<node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />

<node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
  <remap from="~input" to="/point_cloud/points_light_filtered"/>
  <rosparam>
    filter_field_name: z
    filter_limit_min: 0.03
    filter_limit_max: 1.8
    filter_limit_negative: False
    leaf_size: 0.01
  </rosparam>
</node>


<node pkg="nodelet" type="nodelet" name="cropboxremoval" args="load pcl/CropBox pcl_manager" output="screen">
<remap from="~input" to="voxel_grid/output" />
<remap from="~output" to="/cropboxremoval/output" />
<param name="~min_x" value="-1" />
<param name="~max_x" value="1" />
<param name="~min_y" value="-1" />
<param name="~max_y" value="1" />
<param name="~min_z" value="0.35" />
<param name="~max_z" value="1.3" />
</node>




<node pkg="nodelet" type="nodelet" name="statisticalremoval"  args="load pcl/StatisticalOutlierRemoval pcl_manager" >
   <remap from="~input" to="/cropboxremoval/output" />
   <remap from="~output" to="/statistical_filtered_points/output" />
   <param name="~stddev" value="1.5" />
   <param name="~negative" value="False" />
   <param name="~mean_k" value="10" />

</node>

<node name="color_based" pkg="jsk_pcl_ros" type="color_based_region_growing_segmentation" output="screen" >
<remap from="~input" to="/statistical_filtered_points/output" />
<rosparam>
distance_threshold: 5
point_color_threshold: 40
region_color_threshold: 20
min_cluster_size: 200
</rosparam>
</node>

<node name="decomposer_color_based_clustering" pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer" output="screen" >
  <remap from="~input" to="/statistical_filtered_points/output" />
  <remap from="~target" to="/color_based/output" />
  <rosparam>
    max_size: 50000
    min_size: 200
    usa_pca: True
  </rosparam>
</node>

<node name="eucledian_clustering" pkg="jsk_pcl_ros" type="euclidean_clustering" output="screen" >
  <remap from="~input" to="/statistical_filtered_points/output" />
  <remap from="~input/cluster_indices" to="/color_based/output" />
  <rosparam>
    tolerance: 0.15
    max_size: 50000
    min_size: 200
    cluster_filter: 0
  </rosparam>
</node>

<node name="decomposer_euclidean_based_clustering" pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer" output="screen" >
<remap from="~input" to="/statistical_filtered_points/output" />
<remap from="~target" to="/eucledian_clustering/output" />
<rosparam>
distance_threshold: 100
point_color_threshold: 50
region_color_threshold: 50
min_cluster_size: 200
</rosparam>
</node>




<!-- <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
  <remap from="cloud_in" to="/statistical_filtered_points/output" />
  <param name="resolution" value="0.005" />
  <param name="frame_id" type="string" value="camera_link" />
  <param name="sensor_model/max_range" value="3.0" />
</node> -->

<!-- <node type="rviz" name="rviz" pkg="rviz" args="-d $(find realsense_pointcloud)/rviz/test_realsense.rviz" /> -->


</launch>
