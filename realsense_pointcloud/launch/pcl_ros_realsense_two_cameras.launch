<launch>
 <!-- launching two cameras with tfs -->
  <include file="$(find realsense2_camera)/launch/rs_camera.launch">
   <arg name="camera" value="camera_0"/>
   <arg name="serial_no" value="841512070858"/>

   <arg name="align_depth" value="True"/>
   <arg name="color_fps" value="15"/>
   <arg name="color_width" value="1280"/>
   <arg name="color_height" value="720"/>
   <arg name="depth_fps" value="15"/>
   <arg name="depth_width" value="1280"/>
   <arg name="depth_height" value="720"/>
   <arg name="enable_pointcloud" value="True"/>
   <arg name="enable_infra" value="True"/>
   <arg name="filters" value="decimation,spatial,temporal"/>
 </include>
 <include file="$(find realsense2_camera)/launch/rs_camera.launch">
   <arg name="camera" value="camera_1"/>
   <arg name="serial_no" value="831612071569"/>

   <arg name="align_depth" value="True"/>
   <arg name="color_fps" value="15"/>
   <arg name="color_width" value="1280"/>
   <arg name="color_height" value="720"/>
   <arg name="depth_fps" value="15"/>
   <arg name="depth_width" value="1280"/>
   <arg name="depth_height" value="720"/>
   <arg name="enable_pointcloud" value="True"/>
   <arg name="enable_infra" value="True"/>
   <arg name="filters" value="decimation,spatial,temporal"/>
 </include>

 <include file="$(find iri_dynamic_transform_publisher)/launch/node.launch">
   <arg name="node_name"       value="tf_wrist_camera_publisher"/>
   <arg name="params_path"   value="$(find iri_two_cameras)/config/tf_wrist_camera.yaml"/>
 </include>

 <include file="$(find iri_dynamic_transform_publisher)/launch/node.launch">
   <arg name="node_name"       value="tf_canopies_head_publisher"/>
   <arg name="params_path"   value="$(find iri_two_cameras)/config/tf_canopies_head.yaml"/>
 </include>


  <rosparam file="$(find realsense_pointcloud)/cfg/camera_decimation_filter.yaml" command="load" />
  <rosparam file="$(find realsense_pointcloud)/cfg/camera_spatial_filter.yaml" command="load" />
  <rosparam file="$(find realsense_pointcloud)/cfg/camera_temporal_filter.yaml" command="load" />
  <rosparam file="$(find realsense_pointcloud)/cfg/camera_hole_filling_filter.yaml" command="load" />

  <!-- only for rosbags! -->
  <param name ="/use_sim_time" value="true"/>






    <!--The node removes points with higher intensity ( light ) publishes /filtered_depth_image-->
    <node name="pointcloud_preprocess_0" pkg="realsense_pointcloud" type="pointcloud_preprocess.py" output="screen" >
      <!-- input -->
      <remap from="/camera/color/image_raw" to="/camera_0/color/image_raw"/>
      <remap from="/camera/aligned_depth_to_color/image_raw" to="/camera_0/aligned_depth_to_color/image_raw"/>
      <!-- Output -->
      <remap from="/filtered_depth_image" to="/filtered_depth_image_0"/>
    </node>


    <!--The node creates the lines and publishes /filtered_depth_cables-->
    <node name="pointcloud_cable_preprocess" pkg="realsense_pointcloud" type="pointcloud_cables_pcl.py" output="screen" >
      <!-- input -->
      <remap from="/camera/color/image_raw" to="/camera_0/color/image_raw"/>
      <remap from="/camera/aligned_depth_to_color/image_raw" to="/camera_0/aligned_depth_to_color/image_raw"/>
      <remap from="/camera/color/camera_info" to="/camera_0/color/camera_info"/>

      <!-- Output -->
      <remap from="/cables_artificial_pointcloud" to="/cables_artificial_pointcloud_0"/>
    </node>


    <node name="pointcloud_preprocess_1" pkg="realsense_pointcloud" type="pointcloud_preprocess.py" output="screen" >
      <!-- input -->
      <remap from="/camera/color/image_raw" to="/camera_1/color/image_raw"/>
      <remap from="/camera/aligned_depth_to_color/image_raw" to="/camera_1/aligned_depth_to_color/image_raw"/>
      <!-- Output -->
      <remap from="/filtered_depth_image" to="/filtered_depth_image_1"/>
    </node>

<!-- still has to finish cables -->
    <!-- <node name="pointcloud_cable_preprocess" pkg="realsense_pointcloud" type="pointcloud_cables.py" output="screen" /> -->

    <!-- Convert the depth image and the rgb image into a xyzrgb Point Cloud -->
    <!-- <node name="update_frame_id" pkg="depth_image_proc" type="update_frame_id.py" output="screen" /> -->
    <!-- Nodelet manager for this pipeline -->
    <node pkg="nodelet" type="nodelet" args="manager" name="standalone_nodelet" output="screen"/>

    <!-- Convert to point cloud -->
    <node pkg="nodelet" type="nodelet" name="depth_image_proc_0" args="load depth_image_proc/point_cloud_xyzrgb standalone_nodelet --no-bond">
        <!--remap from your specific sensors-->
        <!-- Input: Camera calibration and metadata.  (sensor_msgs/CameraInfo) -->
        <remap from="rgb/camera_info" to="/camera_0/color/camera_info"/>
        <!-- Input: Rectified color image. (sensor_msgs/Image) -->
        <remap from="rgb/image_rect_color" to="/camera_0/color/image_raw"/>
        <!-- Input: Rectified depth image, registered to the RGB camera. (sensor_msgs/Image) -->
        <remap from="depth_registered/image_rect" to="/filtered_depth_image_0"/>
        <!-- Output: XYZ point cloud. If using PCL, subscribe as PointCloud<PointXYZ>.  (sensor_msgs/PointCloud2)  -->
        <remap from="depth_registered/points" to="/point_cloud/points_light_filtered_0"/>
    </node>
    <node pkg="nodelet" type="nodelet" name="depth_image_proc_1" args="load depth_image_proc/point_cloud_xyzrgb standalone_nodelet --no-bond">
        <!--remap from your specific sensors-->
        <!-- Input: Camera calibration and metadata.  (sensor_msgs/CameraInfo) -->
        <remap from="rgb/camera_info" to="/camera_1/color/camera_info"/>
        <!-- Input: Rectified color image. (sensor_msgs/Image) -->
        <remap from="rgb/image_rect_color" to="/camera_1/color/image_raw"/>
        <!-- Input: Rectified depth image, registered to the RGB camera. (sensor_msgs/Image) -->
        <remap from="depth_registered/image_rect" to="/filtered_depth_image_1"/>
        <!-- Output: XYZ point cloud. If using PCL, subscribe as PointCloud<PointXYZ>.  (sensor_msgs/PointCloud2)  -->
        <remap from="depth_registered/points" to="/point_cloud/points_light_filtered_1"/>
    </node>

    <!-- same node as above -->
    <!-- <node pkg="nodelet" type="nodelet" name="depth_image_proc_cables" args="load depth_image_proc/point_cloud_xyzrgb standalone_nodelet no-bond"> -->
        <!--framerate of input depth is lower then camera framrate, parameter waits for 30 imgs-->
    	<!-- <param name="queue_size" value="30" /> -->
        <!--remap from your specific sensors-->
        <!-- Input: Camera calibration and metadata.  (sensor_msgs/CameraInfo) -->
        <!-- <remap from="rgb/camera_info" to="/camera/color/camera_info"/> -->
        <!-- Input: Rectified color image. (sensor_msgs/Image) -->
        <!-- <remap from="rgb/image_rect_color" to="/camera/color/image_raw"/> -->
        <!-- Input: Rectified depth image, registered to the RGB camera. (sensor_msgs/Image) -->
        <!-- <remap from="depth_registered/image_rect" to="/filtered_depth_cables"/> -->
        <!-- Output: XYZ point cloud. If using PCL, subscribe as PointCloud<PointXYZ>.  (sensor_msgs/PointCloud2)  -->
        <!-- <remap from="depth_registered/points" to="/point_cloud/point_cables"/> -->
    <!-- </node> -->






    <!-- <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />  -->

  <!-- Run a passthrough filter to clean NaNs -->
  <!--
  <node pkg="nodelet" type="nodelet" name="passthrough" args="load pcl/PassThrough pcl_manager" output="screen">
    <remap from="~input" to="/camera/depth/color/points" />
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.03
      filter_limit_max: 2
      filter_limit_negative: False
    </rosparam>
  </node>
-->

<node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />

<!-- ########################## PIPELINE FOR CAMERA_0 -->
<node pkg="nodelet" type="nodelet" name="voxel_grid_0" args="load pcl/VoxelGrid pcl_manager" output="screen">
  <remap from="~input" to="/point_cloud/points_light_filtered_0"/>
  <rosparam>
    filter_field_name: z
    filter_limit_min: 0.03
    filter_limit_max: 1.8
    filter_limit_negative: False
    leaf_size: 0.01
  </rosparam>
</node>

<node pkg="nodelet" type="nodelet" name="cropboxremoval_0" args="load pcl/CropBox pcl_manager" output="screen">
<remap from="~input" to="voxel_grid_0/output" />
<remap from="~output" to="/cropboxremoval_0/output" />
<param name="~min_x" value="-1" />
<param name="~max_x" value="1" />
<param name="~min_y" value="-1" />
<param name="~max_y" value="1" />
<param name="~min_z" value="0.35" />
<param name="~max_z" value="1.3" />
</node>

<node pkg="nodelet" type="nodelet" name="statisticalremoval_0"  args="load pcl/StatisticalOutlierRemoval pcl_manager" >
   <remap from="~input" to="/cropboxremoval_0/output" />
   <remap from="~output" to="/statistical_filtered_points_0/output" />
   <param name="~stddev" value="1.5" />
   <param name="~negative" value="False" />
   <param name="~mean_k" value="10" />
</node>

<node name="color_based_0" pkg="jsk_pcl_ros" type="color_based_region_growing_segmentation" output="screen" >
<remap from="~input" to="/statistical_filtered_points_0/output" />
<rosparam>
distance_threshold: 5
point_color_threshold: 40
region_color_threshold: 20
min_cluster_size: 200
</rosparam>
</node>

<node name="decomposer_color_based_clustering_0" pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer" output="screen" >
  <remap from="~input" to="/statistical_filtered_points_0/output" />
  <remap from="~target" to="/color_based_0/output" />
  <rosparam>
    max_size: 50000
    min_size: 200
    usa_pca: True
  </rosparam>
</node>

<node name="eucledian_clustering_0" pkg="jsk_pcl_ros" type="euclidean_clustering" output="screen" >
  <remap from="~input" to="/statistical_filtered_points_0/output" />
  <remap from="~input/cluster_indices" to="/color_based_0/output" />
  <rosparam>
    tolerance: 0.15
    max_size: 50000
    min_size: 200
    cluster_filter: 0
  </rosparam>
</node>

<node name="decomposer_euclidean_based_clustering_0" pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer" output="screen" >
<remap from="~input" to="/statistical_filtered_points_0/output" />
<remap from="~target" to="/eucledian_clustering_0/output" />
<rosparam>
distance_threshold: 100
point_color_threshold: 50
region_color_threshold: 50
min_cluster_size: 200
</rosparam>
</node>



<!-- ########################## PIPELINE FOR CAMERA_1 -->
<node pkg="nodelet" type="nodelet" name="voxel_grid_1" args="load pcl/VoxelGrid pcl_manager" output="screen">
  <remap from="~input" to="/point_cloud/points_light_filtered_1"/>
  <rosparam>
    filter_field_name: z
    filter_limit_min: 0.03
    filter_limit_max: 1.8
    filter_limit_negative: False
    leaf_size: 0.01
  </rosparam>
</node>

<node pkg="nodelet" type="nodelet" name="cropboxremoval_1" args="load pcl/CropBox pcl_manager" output="screen">
<remap from="~input" to="voxel_grid_1/output" />
<remap from="~output" to="/cropboxremoval_1/output" />
<param name="~min_x" value="-1" />
<param name="~max_x" value="1" />
<param name="~min_y" value="-1" />
<param name="~max_y" value="1" />
<param name="~min_z" value="0.35" />
<param name="~max_z" value="1.3" />
</node>

<node pkg="nodelet" type="nodelet" name="statisticalremoval_1"  args="load pcl/StatisticalOutlierRemoval pcl_manager" >
   <remap from="~input" to="/cropboxremoval_1/output" />
   <remap from="~output" to="/statistical_filtered_points_1/output" />
   <param name="~stddev" value="1.5" />
   <param name="~negative" value="False" />
   <param name="~mean_k" value="10" />
</node>

<node name="color_based_1" pkg="jsk_pcl_ros" type="color_based_region_growing_segmentation" output="screen" >
<remap from="~input" to="/statistical_filtered_points_1/output" />
<rosparam>
distance_threshold: 5
point_color_threshold: 40
region_color_threshold: 20
min_cluster_size: 200
</rosparam>
</node>

<node name="decomposer_color_based_clustering_1" pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer" output="screen" >
  <remap from="~input" to="/statistical_filtered_points_1/output" />
  <remap from="~target" to="/color_based_1/output" />
  <rosparam>
    max_size: 50000
    min_size: 200
    usa_pca: True
  </rosparam>
</node>

<node name="eucledian_clustering_1" pkg="jsk_pcl_ros" type="euclidean_clustering" output="screen" >
  <remap from="~input" to="/statistical_filtered_points_1/output" />
  <remap from="~input/cluster_indices" to="/color_based_1/output" />
  <rosparam>
    tolerance: 0.15
    max_size: 50000
    min_size: 200
    cluster_filter: 0
  </rosparam>
</node>

<node name="decomposer_euclidean_based_clustering_1" pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer" output="screen" >
<remap from="~input" to="/statistical_filtered_points_1/output" />
<remap from="~target" to="/eucledian_clustering_1/output" />
<rosparam>
distance_threshold: 100
point_color_threshold: 50
region_color_threshold: 50
min_cluster_size: 200
</rosparam>
</node>


<node type="rviz" name="rviz" pkg="rviz" args="-d $(find realsense_pointcloud)/rviz/two_cameras.rviz" >
</node>


</launch>
